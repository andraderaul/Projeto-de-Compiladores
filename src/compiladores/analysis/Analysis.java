/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladores.analysis;

import compiladores.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStartStart(AStartStart node);
    void caseADeclaracaoTipoDeclaracoes(ADeclaracaoTipoDeclaracoes node);
    void caseADeclaracaoConstDeclaracoes(ADeclaracaoConstDeclaracoes node);
    void caseADeclaracaoListDeclaracaoList(ADeclaracaoListDeclaracaoList node);
    void caseADeclaracaoListaDeclaracao(ADeclaracaoListaDeclaracao node);
    void caseAComandoComando(AComandoComando node);
    void caseAComandoListComandoList(AComandoListComandoList node);
    void caseAComandoAtribComandos(AComandoAtribComandos node);
    void caseAComandoLeiaComandos(AComandoLeiaComandos node);
    void caseAComandoEscrevaComandos(AComandoEscrevaComandos node);
    void caseAComandoSeComandos(AComandoSeComandos node);
    void caseAComandoAvalieComandos(AComandoAvalieComandos node);
    void caseAComandoEnquantoComandos(AComandoEnquantoComandos node);
    void caseAComandoRepitaComandos(AComandoRepitaComandos node);
    void caseAComandoParaComandos(AComandoParaComandos node);
    void caseAComandoPassoComandos(AComandoPassoComandos node);
    void caseAVarVirgVarVirg(AVarVirgVarVirg node);
    void caseAVarVirgListVarVirgList(AVarVirgListVarVirgList node);
    void caseAExpVirgExpVirg(AExpVirgExpVirg node);
    void caseAElogicaVirgExpVirg(AElogicaVirgExpVirg node);
    void caseAExpListExpList(AExpListExpList node);
    void caseATipoReaTipo(ATipoReaTipo node);
    void caseATipoIntTipo(ATipoIntTipo node);
    void caseATipoCharTipo(ATipoCharTipo node);
    void caseATipoBoolTipo(ATipoBoolTipo node);
    void caseAVarIdVar(AVarIdVar node);
    void caseAVarIndexVar(AVarIndexVar node);
    void caseAValStrValor(AValStrValor node);
    void caseAValNumValor(AValNumValor node);
    void caseAVarNumrealValor(AVarNumrealValor node);
    void caseANumANumA(ANumANumA node);
    void caseANumBNumB(ANumBNumB node);
    void caseAPontoVirgAuxPontoVirgAux(APontoVirgAuxPontoVirgAux node);
    void caseAComandoSenaoSenaoComando(AComandoSenaoSenaoComando node);
    void caseAComandoSenao2SenaoComandoDoispontos(AComandoSenao2SenaoComandoDoispontos node);
    void caseAComandoCasoCasoComandos(AComandoCasoCasoComandos node);
    void caseACasoComando(ACasoComando node);
    void caseAComandoPontoVirgComandoPontoVirg(AComandoPontoVirgComandoPontoVirg node);
    void caseAComandoVirgulaComandoListVirg(AComandoVirgulaComandoListVirg node);
    void caseAExpSomaExp(AExpSomaExp node);
    void caseAExpSubtracaoExp(AExpSubtracaoExp node);
    void caseAExpTermoExp(AExpTermoExp node);
    void caseATermoMultTermo(ATermoMultTermo node);
    void caseATermoDivTermo(ATermoDivTermo node);
    void caseATermoFatorTermo(ATermoFatorTermo node);
    void caseAFatorValFator(AFatorValFator node);
    void caseAFatorVarFator(AFatorVarFator node);
    void caseAFatorNegativoFator(AFatorNegativoFator node);
    void caseAFatorParentesesFator(AFatorParentesesFator node);
    void caseAExpLogicaEExpLogica(AExpLogicaEExpLogica node);
    void caseAExpLogicaOuExpLogica(AExpLogicaOuExpLogica node);
    void caseAExpLogicaXorExpLogica(AExpLogicaXorExpLogica node);
    void caseAExpLogicaTermoExpLogica(AExpLogicaTermoExpLogica node);
    void caseAElogicaTermoParentesesExpLogicaTermo(AElogicaTermoParentesesExpLogicaTermo node);
    void caseANaoElogicaTermoExpLogicaTermo(ANaoElogicaTermoExpLogicaTermo node);
    void caseAElogicaTermoFatorExpLogicaTermo(AElogicaTermoFatorExpLogicaTermo node);
    void caseAElogicaFatorMenorigualExpLogicaFator(AElogicaFatorMenorigualExpLogicaFator node);
    void caseAElogicaFatorMaiorigualExpLogicaFator(AElogicaFatorMaiorigualExpLogicaFator node);
    void caseAElogicaFatorMenorqExpLogicaFator(AElogicaFatorMenorqExpLogicaFator node);
    void caseAElogicaFatorMaiorqExpLogicaFator(AElogicaFatorMaiorqExpLogicaFator node);
    void caseAElogicaFatorIgualExpLogicaFator(AElogicaFatorIgualExpLogicaFator node);
    void caseAElogicaFatorDiferenteExpLogicaFator(AElogicaFatorDiferenteExpLogicaFator node);
    void caseAExpExpOuElogica(AExpExpOuElogica node);
    void caseAElogicaExpOuElogica(AElogicaExpOuElogica node);

    void caseTPrograma(TPrograma node);
    void caseTInicio(TInicio node);
    void caseTFimPrograma(TFimPrograma node);
    void caseTSe(TSe node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTFimSe(TFimSe node);
    void caseTEnquanto(TEnquanto node);
    void caseTFaca(TFaca node);
    void caseTFimEnquanto(TFimEnquanto node);
    void caseTPara(TPara node);
    void caseTPasso(TPasso node);
    void caseTDe(TDe node);
    void caseTFimPara(TFimPara node);
    void caseTRepita(TRepita node);
    void caseTAte(TAte node);
    void caseTAvalie(TAvalie node);
    void caseTFimAvalie(TFimAvalie node);
    void caseTCaso(TCaso node);
    void caseTVerdadeiro(TVerdadeiro node);
    void caseTFalso(TFalso node);
    void caseTLeia(TLeia node);
    void caseTEscreva(TEscreva node);
    void caseTInteiro(TInteiro node);
    void caseTCaractere(TCaractere node);
    void caseTReal(TReal node);
    void caseTBooleano(TBooleano node);
    void caseTConst(TConst node);
    void caseTNao(TNao node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTId(TId node);
    void caseTString(TString node);
    void caseTNum(TNum node);
    void caseTNumreal(TNumreal node);
    void caseTBlank(TBlank node);
    void caseTComentarioBloco(TComentarioBloco node);
    void caseTComentarioCorpo(TComentarioCorpo node);
    void caseTComentarioFimBloco(TComentarioFimBloco node);
    void caseTEstrela(TEstrela node);
    void caseTBarra(TBarra node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTPontoEVirg(TPontoEVirg node);
    void caseTVirg(TVirg node);
    void caseTAParentese(TAParentese node);
    void caseTFParentese(TFParentese node);
    void caseTAColchete(TAColchete node);
    void caseTFColchete(TFColchete node);
    void caseTAspasDuplas(TAspasDuplas node);
    void caseTSublinhado(TSublinhado node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTMaiorq(TMaiorq node);
    void caseTMenorq(TMenorq node);
    void caseTMenorOuIgualQ(TMenorOuIgualQ node);
    void caseTMaiorOuIgualQ(TMaiorOuIgualQ node);
    void caseTIgual(TIgual node);
    void caseTDiferente(TDiferente node);
    void caseTAtrib(TAtrib node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
