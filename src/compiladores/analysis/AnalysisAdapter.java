/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladores.analysis;

import java.util.*;
import compiladores.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStartStart(AStartStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracaoTipoDeclaracoes(ADeclaracaoTipoDeclaracoes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracaoConstDeclaracoes(ADeclaracaoConstDeclaracoes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracaoListDeclaracaoList(ADeclaracaoListDeclaracaoList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclaracaoListaDeclaracao(ADeclaracaoListaDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoComando(AComandoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoListComandoList(AComandoListComandoList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoAtribComandos(AComandoAtribComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoLeiaComandos(AComandoLeiaComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoEscrevaComandos(AComandoEscrevaComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoSeComandos(AComandoSeComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoAvalieComandos(AComandoAvalieComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoEnquantoComandos(AComandoEnquantoComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoRepitaComandos(AComandoRepitaComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoParaComandos(AComandoParaComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoPassoComandos(AComandoPassoComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarVirgVarVirg(AVarVirgVarVirg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarVirgListVarVirgList(AVarVirgListVarVirgList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpVirgExpVirg(AExpVirgExpVirg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElogicaVirgExpVirg(AElogicaVirgExpVirg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpListExpList(AExpListExpList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoReaTipo(ATipoReaTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoIntTipo(ATipoIntTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoCharTipo(ATipoCharTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoBoolTipo(ATipoBoolTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarIdVar(AVarIdVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarIndexVar(AVarIndexVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValStrValor(AValStrValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValNumValor(AValNumValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarNumrealValor(AVarNumrealValor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumANumA(ANumANumA node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumBNumB(ANumBNumB node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPontoVirgAuxPontoVirgAux(APontoVirgAuxPontoVirgAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoSenaoSenaoComando(AComandoSenaoSenaoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoSenao2SenaoComandoDoispontos(AComandoSenao2SenaoComandoDoispontos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoCasoCasoComandos(AComandoCasoCasoComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACasoComando(ACasoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoPontoVirgComandoPontoVirg(AComandoPontoVirgComandoPontoVirg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoVirgulaComandoListVirg(AComandoVirgulaComandoListVirg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpSomaExp(AExpSomaExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpSubtracaoExp(AExpSubtracaoExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpTermoExp(AExpTermoExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermoMultTermo(ATermoMultTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermoDivTermo(ATermoDivTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermoFatorTermo(ATermoFatorTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFatorValFator(AFatorValFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFatorVarFator(AFatorVarFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFatorNegativoFator(AFatorNegativoFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFatorParentesesFator(AFatorParentesesFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpLogicaEExpLogica(AExpLogicaEExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpLogicaOuExpLogica(AExpLogicaOuExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpLogicaXorExpLogica(AExpLogicaXorExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpLogicaTermoExpLogica(AExpLogicaTermoExpLogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElogicaTermoParentesesExpLogicaTermo(AElogicaTermoParentesesExpLogicaTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANaoElogicaTermoExpLogicaTermo(ANaoElogicaTermoExpLogicaTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElogicaTermoFatorExpLogicaTermo(AElogicaTermoFatorExpLogicaTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElogicaFatorMenorigualExpLogicaFator(AElogicaFatorMenorigualExpLogicaFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElogicaFatorMaiorigualExpLogicaFator(AElogicaFatorMaiorigualExpLogicaFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElogicaFatorMenorqExpLogicaFator(AElogicaFatorMenorqExpLogicaFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElogicaFatorMaiorqExpLogicaFator(AElogicaFatorMaiorqExpLogicaFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElogicaFatorIgualExpLogicaFator(AElogicaFatorIgualExpLogicaFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElogicaFatorDiferenteExpLogicaFator(AElogicaFatorDiferenteExpLogicaFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpExpOuElogica(AExpExpOuElogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElogicaExpOuElogica(AElogicaExpOuElogica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrograma(TPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInicio(TInicio node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFimPrograma(TFimPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSe(TSe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEntao(TEntao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSenao(TSenao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFimSe(TFimSe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnquanto(TEnquanto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaca(TFaca node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFimEnquanto(TFimEnquanto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPara(TPara node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPasso(TPasso node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDe(TDe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFimPara(TFimPara node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRepita(TRepita node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAte(TAte node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAvalie(TAvalie node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFimAvalie(TFimAvalie node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaso(TCaso node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVerdadeiro(TVerdadeiro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalso(TFalso node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeia(TLeia node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEscreva(TEscreva node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteiro(TInteiro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaractere(TCaractere node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBooleano(TBooleano node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNao(TNao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTE(TE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOu(TOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNum(TNum node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumreal(TNumreal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioBloco(TComentarioBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioCorpo(TComentarioCorpo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioFimBloco(TComentarioFimBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEstrela(TEstrela node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBarra(TBarra node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioLinha(TComentarioLinha node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoisPontos(TDoisPontos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoEVirg(TPontoEVirg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirg(TVirg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAParentese(TAParentese node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFParentese(TFParentese node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAColchete(TAColchete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFColchete(TFColchete node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAspasDuplas(TAspasDuplas node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSublinhado(TSublinhado node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMais(TMais node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenos(TMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaiorq(TMaiorq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenorq(TMenorq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenorOuIgualQ(TMenorOuIgualQ node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaiorOuIgualQ(TMaiorOuIgualQ node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIgual(TIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiferente(TDiferente node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtrib(TAtrib node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
