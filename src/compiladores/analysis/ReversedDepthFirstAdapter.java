/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladores.analysis;

import java.util.*;
import compiladores.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStartStart(AStartStart node)
    {
        defaultIn(node);
    }

    public void outAStartStart(AStartStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartStart(AStartStart node)
    {
        inAStartStart(node);
        if(node.getFimPrograma() != null)
        {
            node.getFimPrograma().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAStartStart(node);
    }

    public void inADeclaracaoTipoDeclaracoes(ADeclaracaoTipoDeclaracoes node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoTipoDeclaracoes(ADeclaracaoTipoDeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoTipoDeclaracoes(ADeclaracaoTipoDeclaracoes node)
    {
        inADeclaracaoTipoDeclaracoes(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVarVirgList() != null)
        {
            node.getVarVirgList().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outADeclaracaoTipoDeclaracoes(node);
    }

    public void inADeclaracaoConstDeclaracoes(ADeclaracaoConstDeclaracoes node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoConstDeclaracoes(ADeclaracaoConstDeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoConstDeclaracoes(ADeclaracaoConstDeclaracoes node)
    {
        inADeclaracaoConstDeclaracoes(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outADeclaracaoConstDeclaracoes(node);
    }

    public void inADeclaracaoListDeclaracaoList(ADeclaracaoListDeclaracaoList node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoListDeclaracaoList(ADeclaracaoListDeclaracaoList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoListDeclaracaoList(ADeclaracaoListDeclaracaoList node)
    {
        inADeclaracaoListDeclaracaoList(node);
        {
            List<PDeclaracoes> copy = new ArrayList<PDeclaracoes>(node.getDeclaracoes());
            Collections.reverse(copy);
            for(PDeclaracoes e : copy)
            {
                e.apply(this);
            }
        }
        outADeclaracaoListDeclaracaoList(node);
    }

    public void inADeclaracaoListaDeclaracao(ADeclaracaoListaDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoListaDeclaracao(ADeclaracaoListaDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoListaDeclaracao(ADeclaracaoListaDeclaracao node)
    {
        inADeclaracaoListaDeclaracao(node);
        if(node.getDeclaracaoList() != null)
        {
            node.getDeclaracaoList().apply(this);
        }
        outADeclaracaoListaDeclaracao(node);
    }

    public void inAComandoComando(AComandoComando node)
    {
        defaultIn(node);
    }

    public void outAComandoComando(AComandoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoComando(AComandoComando node)
    {
        inAComandoComando(node);
        if(node.getComandoList() != null)
        {
            node.getComandoList().apply(this);
        }
        outAComandoComando(node);
    }

    public void inAComandoListComandoList(AComandoListComandoList node)
    {
        defaultIn(node);
    }

    public void outAComandoListComandoList(AComandoListComandoList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoListComandoList(AComandoListComandoList node)
    {
        inAComandoListComandoList(node);
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getComandos());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        outAComandoListComandoList(node);
    }

    public void inAComandoAtribComandos(AComandoAtribComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoAtribComandos(AComandoAtribComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoAtribComandos(AComandoAtribComandos node)
    {
        inAComandoAtribComandos(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        if(node.getExpOuElogica() != null)
        {
            node.getExpOuElogica().apply(this);
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAComandoAtribComandos(node);
    }

    public void inAComandoLeiaComandos(AComandoLeiaComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoLeiaComandos(AComandoLeiaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoLeiaComandos(AComandoLeiaComandos node)
    {
        inAComandoLeiaComandos(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        if(node.getFParentese() != null)
        {
            node.getFParentese().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVarVirgList() != null)
        {
            node.getVarVirgList().apply(this);
        }
        if(node.getAParentese() != null)
        {
            node.getAParentese().apply(this);
        }
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        outAComandoLeiaComandos(node);
    }

    public void inAComandoEscrevaComandos(AComandoEscrevaComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoEscrevaComandos(AComandoEscrevaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEscrevaComandos(AComandoEscrevaComandos node)
    {
        inAComandoEscrevaComandos(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        if(node.getFParentese() != null)
        {
            node.getFParentese().apply(this);
        }
        if(node.getExpOuElogica() != null)
        {
            node.getExpOuElogica().apply(this);
        }
        if(node.getExpList() != null)
        {
            node.getExpList().apply(this);
        }
        if(node.getAParentese() != null)
        {
            node.getAParentese().apply(this);
        }
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        outAComandoEscrevaComandos(node);
    }

    public void inAComandoSeComandos(AComandoSeComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoSeComandos(AComandoSeComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSeComandos(AComandoSeComandos node)
    {
        inAComandoSeComandos(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getSenaoComando() != null)
        {
            node.getSenaoComando().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getComandoList() != null)
        {
            node.getComandoList().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getFParentese() != null)
        {
            node.getFParentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAParentese() != null)
        {
            node.getAParentese().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAComandoSeComandos(node);
    }

    public void inAComandoAvalieComandos(AComandoAvalieComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoAvalieComandos(AComandoAvalieComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoAvalieComandos(AComandoAvalieComandos node)
    {
        inAComandoAvalieComandos(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        if(node.getSenaoComandoDoispontos() != null)
        {
            node.getSenaoComandoDoispontos().apply(this);
        }
        if(node.getCasoComando() != null)
        {
            node.getCasoComando().apply(this);
        }
        if(node.getFParentese() != null)
        {
            node.getFParentese().apply(this);
        }
        if(node.getExpOuElogica() != null)
        {
            node.getExpOuElogica().apply(this);
        }
        if(node.getAParentese() != null)
        {
            node.getAParentese().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outAComandoAvalieComandos(node);
    }

    public void inAComandoEnquantoComandos(AComandoEnquantoComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoEnquantoComandos(AComandoEnquantoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEnquantoComandos(AComandoEnquantoComandos node)
    {
        inAComandoEnquantoComandos(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getComandoList() != null)
        {
            node.getComandoList().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getFParentese() != null)
        {
            node.getFParentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAParentese() != null)
        {
            node.getAParentese().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAComandoEnquantoComandos(node);
    }

    public void inAComandoRepitaComandos(AComandoRepitaComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoRepitaComandos(AComandoRepitaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoRepitaComandos(AComandoRepitaComandos node)
    {
        inAComandoRepitaComandos(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        if(node.getFParentese() != null)
        {
            node.getFParentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAParentese() != null)
        {
            node.getAParentese().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getComandoList() != null)
        {
            node.getComandoList().apply(this);
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        outAComandoRepitaComandos(node);
    }

    public void inAComandoParaComandos(AComandoParaComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoParaComandos(AComandoParaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoParaComandos(AComandoParaComandos node)
    {
        inAComandoParaComandos(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getComandoList() != null)
        {
            node.getComandoList().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAComandoParaComandos(node);
    }

    public void inAComandoPassoComandos(AComandoPassoComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoPassoComandos(AComandoPassoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoPassoComandos(AComandoPassoComandos node)
    {
        inAComandoPassoComandos(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getComandoList() != null)
        {
            node.getComandoList().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAComandoPassoComandos(node);
    }

    public void inAVarVirgVarVirg(AVarVirgVarVirg node)
    {
        defaultIn(node);
    }

    public void outAVarVirgVarVirg(AVarVirgVarVirg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVirgVarVirg(AVarVirgVarVirg node)
    {
        inAVarVirgVarVirg(node);
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarVirgVarVirg(node);
    }

    public void inAVarVirgListVarVirgList(AVarVirgListVarVirgList node)
    {
        defaultIn(node);
    }

    public void outAVarVirgListVarVirgList(AVarVirgListVarVirgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVirgListVarVirgList(AVarVirgListVarVirgList node)
    {
        inAVarVirgListVarVirgList(node);
        {
            List<PVarVirg> copy = new ArrayList<PVarVirg>(node.getVarVirg());
            Collections.reverse(copy);
            for(PVarVirg e : copy)
            {
                e.apply(this);
            }
        }
        outAVarVirgListVarVirgList(node);
    }

    public void inAExpVirgExpVirg(AExpVirgExpVirg node)
    {
        defaultIn(node);
    }

    public void outAExpVirgExpVirg(AExpVirgExpVirg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpVirgExpVirg(AExpVirgExpVirg node)
    {
        inAExpVirgExpVirg(node);
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpVirgExpVirg(node);
    }

    public void inAElogicaVirgExpVirg(AElogicaVirgExpVirg node)
    {
        defaultIn(node);
    }

    public void outAElogicaVirgExpVirg(AElogicaVirgExpVirg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElogicaVirgExpVirg(AElogicaVirgExpVirg node)
    {
        inAElogicaVirgExpVirg(node);
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAElogicaVirgExpVirg(node);
    }

    public void inAExpListExpList(AExpListExpList node)
    {
        defaultIn(node);
    }

    public void outAExpListExpList(AExpListExpList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpListExpList(AExpListExpList node)
    {
        inAExpListExpList(node);
        {
            List<PExpVirg> copy = new ArrayList<PExpVirg>(node.getExpVirg());
            Collections.reverse(copy);
            for(PExpVirg e : copy)
            {
                e.apply(this);
            }
        }
        outAExpListExpList(node);
    }

    public void inATipoReaTipo(ATipoReaTipo node)
    {
        defaultIn(node);
    }

    public void outATipoReaTipo(ATipoReaTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoReaTipo(ATipoReaTipo node)
    {
        inATipoReaTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outATipoReaTipo(node);
    }

    public void inATipoIntTipo(ATipoIntTipo node)
    {
        defaultIn(node);
    }

    public void outATipoIntTipo(ATipoIntTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoIntTipo(ATipoIntTipo node)
    {
        inATipoIntTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outATipoIntTipo(node);
    }

    public void inATipoCharTipo(ATipoCharTipo node)
    {
        defaultIn(node);
    }

    public void outATipoCharTipo(ATipoCharTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoCharTipo(ATipoCharTipo node)
    {
        inATipoCharTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outATipoCharTipo(node);
    }

    public void inATipoBoolTipo(ATipoBoolTipo node)
    {
        defaultIn(node);
    }

    public void outATipoBoolTipo(ATipoBoolTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBoolTipo(ATipoBoolTipo node)
    {
        inATipoBoolTipo(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outATipoBoolTipo(node);
    }

    public void inAVarIdVar(AVarIdVar node)
    {
        defaultIn(node);
    }

    public void outAVarIdVar(AVarIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarIdVar(AVarIdVar node)
    {
        inAVarIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarIdVar(node);
    }

    public void inAVarIndexVar(AVarIndexVar node)
    {
        defaultIn(node);
    }

    public void outAVarIndexVar(AVarIndexVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarIndexVar(AVarIndexVar node)
    {
        inAVarIndexVar(node);
        if(node.getFColchete() != null)
        {
            node.getFColchete().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getAColchete() != null)
        {
            node.getAColchete().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarIndexVar(node);
    }

    public void inAValStrValor(AValStrValor node)
    {
        defaultIn(node);
    }

    public void outAValStrValor(AValStrValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValStrValor(AValStrValor node)
    {
        inAValStrValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAValStrValor(node);
    }

    public void inAValNumValor(AValNumValor node)
    {
        defaultIn(node);
    }

    public void outAValNumValor(AValNumValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValNumValor(AValNumValor node)
    {
        inAValNumValor(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outAValNumValor(node);
    }

    public void inAVarNumrealValor(AVarNumrealValor node)
    {
        defaultIn(node);
    }

    public void outAVarNumrealValor(AVarNumrealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarNumrealValor(AVarNumrealValor node)
    {
        inAVarNumrealValor(node);
        if(node.getNumreal() != null)
        {
            node.getNumreal().apply(this);
        }
        outAVarNumrealValor(node);
    }

    public void inANumANumA(ANumANumA node)
    {
        defaultIn(node);
    }

    public void outANumANumA(ANumANumA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumANumA(ANumANumA node)
    {
        inANumANumA(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumANumA(node);
    }

    public void inANumBNumB(ANumBNumB node)
    {
        defaultIn(node);
    }

    public void outANumBNumB(ANumBNumB node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumBNumB(ANumBNumB node)
    {
        inANumBNumB(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumBNumB(node);
    }

    public void inAPontoVirgAuxPontoVirgAux(APontoVirgAuxPontoVirgAux node)
    {
        defaultIn(node);
    }

    public void outAPontoVirgAuxPontoVirgAux(APontoVirgAuxPontoVirgAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPontoVirgAuxPontoVirgAux(APontoVirgAuxPontoVirgAux node)
    {
        inAPontoVirgAuxPontoVirgAux(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        outAPontoVirgAuxPontoVirgAux(node);
    }

    public void inAComandoSenaoSenaoComando(AComandoSenaoSenaoComando node)
    {
        defaultIn(node);
    }

    public void outAComandoSenaoSenaoComando(AComandoSenaoSenaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSenaoSenaoComando(AComandoSenaoSenaoComando node)
    {
        inAComandoSenaoSenaoComando(node);
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getComandoList() != null)
        {
            node.getComandoList().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outAComandoSenaoSenaoComando(node);
    }

    public void inAComandoSenao2SenaoComandoDoispontos(AComandoSenao2SenaoComandoDoispontos node)
    {
        defaultIn(node);
    }

    public void outAComandoSenao2SenaoComandoDoispontos(AComandoSenao2SenaoComandoDoispontos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSenao2SenaoComandoDoispontos(AComandoSenao2SenaoComandoDoispontos node)
    {
        inAComandoSenao2SenaoComandoDoispontos(node);
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getComandoList() != null)
        {
            node.getComandoList().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outAComandoSenao2SenaoComandoDoispontos(node);
    }

    public void inAComandoCasoCasoComandos(AComandoCasoCasoComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoCasoCasoComandos(AComandoCasoCasoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoCasoCasoComandos(AComandoCasoCasoComandos node)
    {
        inAComandoCasoCasoComandos(node);
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getComandoList() != null)
        {
            node.getComandoList().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        outAComandoCasoCasoComandos(node);
    }

    public void inACasoComando(ACasoComando node)
    {
        defaultIn(node);
    }

    public void outACasoComando(ACasoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoComando(ACasoComando node)
    {
        inACasoComando(node);
        {
            List<PCasoComandos> copy = new ArrayList<PCasoComandos>(node.getCasoComandos());
            Collections.reverse(copy);
            for(PCasoComandos e : copy)
            {
                e.apply(this);
            }
        }
        outACasoComando(node);
    }

    public void inAComandoPontoVirgComandoPontoVirg(AComandoPontoVirgComandoPontoVirg node)
    {
        defaultIn(node);
    }

    public void outAComandoPontoVirgComandoPontoVirg(AComandoPontoVirgComandoPontoVirg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoPontoVirgComandoPontoVirg(AComandoPontoVirgComandoPontoVirg node)
    {
        inAComandoPontoVirgComandoPontoVirg(node);
        if(node.getPontoEVirg() != null)
        {
            node.getPontoEVirg().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outAComandoPontoVirgComandoPontoVirg(node);
    }

    public void inAComandoVirgulaComandoListVirg(AComandoVirgulaComandoListVirg node)
    {
        defaultIn(node);
    }

    public void outAComandoVirgulaComandoListVirg(AComandoVirgulaComandoListVirg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoVirgulaComandoListVirg(AComandoVirgulaComandoListVirg node)
    {
        inAComandoVirgulaComandoListVirg(node);
        {
            List<PComandoPontoVirg> copy = new ArrayList<PComandoPontoVirg>(node.getComandoPontoVirg());
            Collections.reverse(copy);
            for(PComandoPontoVirg e : copy)
            {
                e.apply(this);
            }
        }
        outAComandoVirgulaComandoListVirg(node);
    }

    public void inAExpSomaExp(AExpSomaExp node)
    {
        defaultIn(node);
    }

    public void outAExpSomaExp(AExpSomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSomaExp(AExpSomaExp node)
    {
        inAExpSomaExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpSomaExp(node);
    }

    public void inAExpSubtracaoExp(AExpSubtracaoExp node)
    {
        defaultIn(node);
    }

    public void outAExpSubtracaoExp(AExpSubtracaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSubtracaoExp(AExpSubtracaoExp node)
    {
        inAExpSubtracaoExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpSubtracaoExp(node);
    }

    public void inAExpTermoExp(AExpTermoExp node)
    {
        defaultIn(node);
    }

    public void outAExpTermoExp(AExpTermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpTermoExp(AExpTermoExp node)
    {
        inAExpTermoExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAExpTermoExp(node);
    }

    public void inATermoMultTermo(ATermoMultTermo node)
    {
        defaultIn(node);
    }

    public void outATermoMultTermo(ATermoMultTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoMultTermo(ATermoMultTermo node)
    {
        inATermoMultTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoMultTermo(node);
    }

    public void inATermoDivTermo(ATermoDivTermo node)
    {
        defaultIn(node);
    }

    public void outATermoDivTermo(ATermoDivTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoDivTermo(ATermoDivTermo node)
    {
        inATermoDivTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoDivTermo(node);
    }

    public void inATermoFatorTermo(ATermoFatorTermo node)
    {
        defaultIn(node);
    }

    public void outATermoFatorTermo(ATermoFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoFatorTermo(ATermoFatorTermo node)
    {
        inATermoFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outATermoFatorTermo(node);
    }

    public void inAFatorValFator(AFatorValFator node)
    {
        defaultIn(node);
    }

    public void outAFatorValFator(AFatorValFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorValFator(AFatorValFator node)
    {
        inAFatorValFator(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAFatorValFator(node);
    }

    public void inAFatorVarFator(AFatorVarFator node)
    {
        defaultIn(node);
    }

    public void outAFatorVarFator(AFatorVarFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorVarFator(AFatorVarFator node)
    {
        inAFatorVarFator(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAFatorVarFator(node);
    }

    public void inAFatorNegativoFator(AFatorNegativoFator node)
    {
        defaultIn(node);
    }

    public void outAFatorNegativoFator(AFatorNegativoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorNegativoFator(AFatorNegativoFator node)
    {
        inAFatorNegativoFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAFatorNegativoFator(node);
    }

    public void inAFatorParentesesFator(AFatorParentesesFator node)
    {
        defaultIn(node);
    }

    public void outAFatorParentesesFator(AFatorParentesesFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorParentesesFator(AFatorParentesesFator node)
    {
        inAFatorParentesesFator(node);
        if(node.getFParentese() != null)
        {
            node.getFParentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAParentese() != null)
        {
            node.getAParentese().apply(this);
        }
        outAFatorParentesesFator(node);
    }

    public void inAExpLogicaEExpLogica(AExpLogicaEExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpLogicaEExpLogica(AExpLogicaEExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogicaEExpLogica(AExpLogicaEExpLogica node)
    {
        inAExpLogicaEExpLogica(node);
        if(node.getExpLogicaTermo() != null)
        {
            node.getExpLogicaTermo().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAExpLogicaEExpLogica(node);
    }

    public void inAExpLogicaOuExpLogica(AExpLogicaOuExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpLogicaOuExpLogica(AExpLogicaOuExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogicaOuExpLogica(AExpLogicaOuExpLogica node)
    {
        inAExpLogicaOuExpLogica(node);
        if(node.getExpLogicaTermo() != null)
        {
            node.getExpLogicaTermo().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAExpLogicaOuExpLogica(node);
    }

    public void inAExpLogicaXorExpLogica(AExpLogicaXorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpLogicaXorExpLogica(AExpLogicaXorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogicaXorExpLogica(AExpLogicaXorExpLogica node)
    {
        inAExpLogicaXorExpLogica(node);
        if(node.getExpLogicaTermo() != null)
        {
            node.getExpLogicaTermo().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAExpLogicaXorExpLogica(node);
    }

    public void inAExpLogicaTermoExpLogica(AExpLogicaTermoExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpLogicaTermoExpLogica(AExpLogicaTermoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogicaTermoExpLogica(AExpLogicaTermoExpLogica node)
    {
        inAExpLogicaTermoExpLogica(node);
        if(node.getExpLogicaTermo() != null)
        {
            node.getExpLogicaTermo().apply(this);
        }
        outAExpLogicaTermoExpLogica(node);
    }

    public void inAElogicaTermoParentesesExpLogicaTermo(AElogicaTermoParentesesExpLogicaTermo node)
    {
        defaultIn(node);
    }

    public void outAElogicaTermoParentesesExpLogicaTermo(AElogicaTermoParentesesExpLogicaTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElogicaTermoParentesesExpLogicaTermo(AElogicaTermoParentesesExpLogicaTermo node)
    {
        inAElogicaTermoParentesesExpLogicaTermo(node);
        if(node.getFParentese() != null)
        {
            node.getFParentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAParentese() != null)
        {
            node.getAParentese().apply(this);
        }
        outAElogicaTermoParentesesExpLogicaTermo(node);
    }

    public void inANaoElogicaTermoExpLogicaTermo(ANaoElogicaTermoExpLogicaTermo node)
    {
        defaultIn(node);
    }

    public void outANaoElogicaTermoExpLogicaTermo(ANaoElogicaTermoExpLogicaTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoElogicaTermoExpLogicaTermo(ANaoElogicaTermoExpLogicaTermo node)
    {
        inANaoElogicaTermoExpLogicaTermo(node);
        if(node.getExpLogicaTermo() != null)
        {
            node.getExpLogicaTermo().apply(this);
        }
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outANaoElogicaTermoExpLogicaTermo(node);
    }

    public void inAElogicaTermoFatorExpLogicaTermo(AElogicaTermoFatorExpLogicaTermo node)
    {
        defaultIn(node);
    }

    public void outAElogicaTermoFatorExpLogicaTermo(AElogicaTermoFatorExpLogicaTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElogicaTermoFatorExpLogicaTermo(AElogicaTermoFatorExpLogicaTermo node)
    {
        inAElogicaTermoFatorExpLogicaTermo(node);
        if(node.getExpLogicaFator() != null)
        {
            node.getExpLogicaFator().apply(this);
        }
        outAElogicaTermoFatorExpLogicaTermo(node);
    }

    public void inAElogicaFatorMenorigualExpLogicaFator(AElogicaFatorMenorigualExpLogicaFator node)
    {
        defaultIn(node);
    }

    public void outAElogicaFatorMenorigualExpLogicaFator(AElogicaFatorMenorigualExpLogicaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElogicaFatorMenorigualExpLogicaFator(AElogicaFatorMenorigualExpLogicaFator node)
    {
        inAElogicaFatorMenorigualExpLogicaFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMenorOuIgualQ() != null)
        {
            node.getMenorOuIgualQ().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAElogicaFatorMenorigualExpLogicaFator(node);
    }

    public void inAElogicaFatorMaiorigualExpLogicaFator(AElogicaFatorMaiorigualExpLogicaFator node)
    {
        defaultIn(node);
    }

    public void outAElogicaFatorMaiorigualExpLogicaFator(AElogicaFatorMaiorigualExpLogicaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElogicaFatorMaiorigualExpLogicaFator(AElogicaFatorMaiorigualExpLogicaFator node)
    {
        inAElogicaFatorMaiorigualExpLogicaFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMaiorOuIgualQ() != null)
        {
            node.getMaiorOuIgualQ().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAElogicaFatorMaiorigualExpLogicaFator(node);
    }

    public void inAElogicaFatorMenorqExpLogicaFator(AElogicaFatorMenorqExpLogicaFator node)
    {
        defaultIn(node);
    }

    public void outAElogicaFatorMenorqExpLogicaFator(AElogicaFatorMenorqExpLogicaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElogicaFatorMenorqExpLogicaFator(AElogicaFatorMenorqExpLogicaFator node)
    {
        inAElogicaFatorMenorqExpLogicaFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMenorq() != null)
        {
            node.getMenorq().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAElogicaFatorMenorqExpLogicaFator(node);
    }

    public void inAElogicaFatorMaiorqExpLogicaFator(AElogicaFatorMaiorqExpLogicaFator node)
    {
        defaultIn(node);
    }

    public void outAElogicaFatorMaiorqExpLogicaFator(AElogicaFatorMaiorqExpLogicaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElogicaFatorMaiorqExpLogicaFator(AElogicaFatorMaiorqExpLogicaFator node)
    {
        inAElogicaFatorMaiorqExpLogicaFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMaiorq() != null)
        {
            node.getMaiorq().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAElogicaFatorMaiorqExpLogicaFator(node);
    }

    public void inAElogicaFatorIgualExpLogicaFator(AElogicaFatorIgualExpLogicaFator node)
    {
        defaultIn(node);
    }

    public void outAElogicaFatorIgualExpLogicaFator(AElogicaFatorIgualExpLogicaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElogicaFatorIgualExpLogicaFator(AElogicaFatorIgualExpLogicaFator node)
    {
        inAElogicaFatorIgualExpLogicaFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAElogicaFatorIgualExpLogicaFator(node);
    }

    public void inAElogicaFatorDiferenteExpLogicaFator(AElogicaFatorDiferenteExpLogicaFator node)
    {
        defaultIn(node);
    }

    public void outAElogicaFatorDiferenteExpLogicaFator(AElogicaFatorDiferenteExpLogicaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElogicaFatorDiferenteExpLogicaFator(AElogicaFatorDiferenteExpLogicaFator node)
    {
        inAElogicaFatorDiferenteExpLogicaFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAElogicaFatorDiferenteExpLogicaFator(node);
    }

    public void inAExpExpOuElogica(AExpExpOuElogica node)
    {
        defaultIn(node);
    }

    public void outAExpExpOuElogica(AExpExpOuElogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpExpOuElogica(AExpExpOuElogica node)
    {
        inAExpExpOuElogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpExpOuElogica(node);
    }

    public void inAElogicaExpOuElogica(AElogicaExpOuElogica node)
    {
        defaultIn(node);
    }

    public void outAElogicaExpOuElogica(AElogicaExpOuElogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElogicaExpOuElogica(AElogicaExpOuElogica node)
    {
        inAElogicaExpOuElogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAElogicaExpOuElogica(node);
    }
}
