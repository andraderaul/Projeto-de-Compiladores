/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladores.node;

import compiladores.analysis.*;

@SuppressWarnings("nls")
public final class AVarIndexVar extends PVar
{
    private TId _id_;
    private TAColchete _aColchete_;
    private TNum _num_;
    private TFColchete _fColchete_;

    public AVarIndexVar()
    {
        // Constructor
    }

    public AVarIndexVar(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TAColchete _aColchete_,
        @SuppressWarnings("hiding") TNum _num_,
        @SuppressWarnings("hiding") TFColchete _fColchete_)
    {
        // Constructor
        setId(_id_);

        setAColchete(_aColchete_);

        setNum(_num_);

        setFColchete(_fColchete_);

    }

    @Override
    public Object clone()
    {
        return new AVarIndexVar(
            cloneNode(this._id_),
            cloneNode(this._aColchete_),
            cloneNode(this._num_),
            cloneNode(this._fColchete_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarIndexVar(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TAColchete getAColchete()
    {
        return this._aColchete_;
    }

    public void setAColchete(TAColchete node)
    {
        if(this._aColchete_ != null)
        {
            this._aColchete_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aColchete_ = node;
    }

    public TNum getNum()
    {
        return this._num_;
    }

    public void setNum(TNum node)
    {
        if(this._num_ != null)
        {
            this._num_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._num_ = node;
    }

    public TFColchete getFColchete()
    {
        return this._fColchete_;
    }

    public void setFColchete(TFColchete node)
    {
        if(this._fColchete_ != null)
        {
            this._fColchete_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fColchete_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._aColchete_)
            + toString(this._num_)
            + toString(this._fColchete_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._aColchete_ == child)
        {
            this._aColchete_ = null;
            return;
        }

        if(this._num_ == child)
        {
            this._num_ = null;
            return;
        }

        if(this._fColchete_ == child)
        {
            this._fColchete_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._aColchete_ == oldChild)
        {
            setAColchete((TAColchete) newChild);
            return;
        }

        if(this._num_ == oldChild)
        {
            setNum((TNum) newChild);
            return;
        }

        if(this._fColchete_ == oldChild)
        {
            setFColchete((TFColchete) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
