/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladores.node;

import compiladores.analysis.*;

@SuppressWarnings("nls")
public final class AComandoEscrevaComando extends PComando
{
    private TEscreva _escreva_;
    private TAParentese _aParentese_;
    private PExpVirg _expVirg_;
    private PExp _exp_;
    private TFParentese _fParentese_;
    private TPontoEVirg _pontoEVirg_;

    public AComandoEscrevaComando()
    {
        // Constructor
    }

    public AComandoEscrevaComando(
        @SuppressWarnings("hiding") TEscreva _escreva_,
        @SuppressWarnings("hiding") TAParentese _aParentese_,
        @SuppressWarnings("hiding") PExpVirg _expVirg_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TFParentese _fParentese_,
        @SuppressWarnings("hiding") TPontoEVirg _pontoEVirg_)
    {
        // Constructor
        setEscreva(_escreva_);

        setAParentese(_aParentese_);

        setExpVirg(_expVirg_);

        setExp(_exp_);

        setFParentese(_fParentese_);

        setPontoEVirg(_pontoEVirg_);

    }

    @Override
    public Object clone()
    {
        return new AComandoEscrevaComando(
            cloneNode(this._escreva_),
            cloneNode(this._aParentese_),
            cloneNode(this._expVirg_),
            cloneNode(this._exp_),
            cloneNode(this._fParentese_),
            cloneNode(this._pontoEVirg_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComandoEscrevaComando(this);
    }

    public TEscreva getEscreva()
    {
        return this._escreva_;
    }

    public void setEscreva(TEscreva node)
    {
        if(this._escreva_ != null)
        {
            this._escreva_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._escreva_ = node;
    }

    public TAParentese getAParentese()
    {
        return this._aParentese_;
    }

    public void setAParentese(TAParentese node)
    {
        if(this._aParentese_ != null)
        {
            this._aParentese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aParentese_ = node;
    }

    public PExpVirg getExpVirg()
    {
        return this._expVirg_;
    }

    public void setExpVirg(PExpVirg node)
    {
        if(this._expVirg_ != null)
        {
            this._expVirg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expVirg_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TFParentese getFParentese()
    {
        return this._fParentese_;
    }

    public void setFParentese(TFParentese node)
    {
        if(this._fParentese_ != null)
        {
            this._fParentese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fParentese_ = node;
    }

    public TPontoEVirg getPontoEVirg()
    {
        return this._pontoEVirg_;
    }

    public void setPontoEVirg(TPontoEVirg node)
    {
        if(this._pontoEVirg_ != null)
        {
            this._pontoEVirg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pontoEVirg_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._escreva_)
            + toString(this._aParentese_)
            + toString(this._expVirg_)
            + toString(this._exp_)
            + toString(this._fParentese_)
            + toString(this._pontoEVirg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._escreva_ == child)
        {
            this._escreva_ = null;
            return;
        }

        if(this._aParentese_ == child)
        {
            this._aParentese_ = null;
            return;
        }

        if(this._expVirg_ == child)
        {
            this._expVirg_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._fParentese_ == child)
        {
            this._fParentese_ = null;
            return;
        }

        if(this._pontoEVirg_ == child)
        {
            this._pontoEVirg_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._escreva_ == oldChild)
        {
            setEscreva((TEscreva) newChild);
            return;
        }

        if(this._aParentese_ == oldChild)
        {
            setAParentese((TAParentese) newChild);
            return;
        }

        if(this._expVirg_ == oldChild)
        {
            setExpVirg((PExpVirg) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._fParentese_ == oldChild)
        {
            setFParentese((TFParentese) newChild);
            return;
        }

        if(this._pontoEVirg_ == oldChild)
        {
            setPontoEVirg((TPontoEVirg) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
